{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\melo-\\\\Documents\\\\NetBeansProjects\\\\SolidMusic\\\\FrontEnd\\\\src\\\\Fetch.js\";\nimport { button, Breadcrumb, Card, Form, Container, Row, Col, Table } from \"react-bootstrap\";\nimport React, { useState, useEffect } from \"react\";\nimport Navbar1 from \"./components/Navbar1\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Fetchmusic() {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      title: 'React POST Request Example'\n    })\n  };\n  fetch('http://localhost:8080/SolidCode-BackEnd/api/solidMusic/searchq=jason derulo', requestOptions).then(async response => {\n    var _response$headers$get;\n\n    const isJson = (_response$headers$get = response.headers.get('content-type')) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.includes('application/json');\n    const data = isJson && (await response.json()); // check for error response\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.message || response.status;\n      return Promise.reject(error);\n    }\n\n    this.setState({\n      postId: data.id\n    });\n  }).catch(error => {\n    this.setState({\n      errorMessage: error.toString()\n    });\n    console.error('There was an error!', error);\n  });\n  return /*#__PURE__*/_jsxDEV(\"container\", {\n    className: \"themed-container\",\n    fluid: \"md\",\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      variant: \"dark\",\n      responsive: true,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Title name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Artist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: postId.map(item => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 11\n          }, this)\n        }, void 0, false))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Fetchmusic;\nexport { Fetchmusic };\n\nvar _c;\n\n$RefreshReg$(_c, \"Fetchmusic\");","map":{"version":3,"sources":["C:/Users/melo-/Documents/NetBeansProjects/SolidMusic/FrontEnd/src/Fetch.js"],"names":["button","Breadcrumb","Card","Form","Container","Row","Col","Table","React","useState","useEffect","Navbar1","Fetchmusic","requestOptions","method","headers","body","JSON","stringify","title","fetch","then","response","isJson","get","includes","data","json","ok","error","message","status","Promise","reject","setState","postId","id","catch","errorMessage","toString","console","map","item"],"mappings":";AAAA,SAAQA,MAAR,EAAgBC,UAAhB,EAA4BC,IAA5B,EAAkCC,IAAlC,EAAwCC,SAAxC,EAAmDC,GAAnD,EAAwDC,GAAxD,EAA4DC,KAA5D,QAAwE,iBAAxE;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,OAAOC,OAAP,MAAoB,sBAApB;;;;AAEA,SAASC,UAAT,GAAsB;AACpB,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFY;AAGrBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAf;AAHe,GAAvB;AAKFC,EAAAA,KAAK,CAAC,6EAAD,EAAgFP,cAAhF,CAAL,CACKQ,IADL,CACU,MAAMC,QAAN,IAAkB;AAAA;;AACpB,UAAMC,MAAM,4BAAGD,QAAQ,CAACP,OAAT,CAAiBS,GAAjB,CAAqB,cAArB,CAAH,0DAAG,sBAAsCC,QAAtC,CAA+C,kBAA/C,CAAf;AACA,UAAMC,IAAI,GAAGH,MAAM,KAAI,MAAMD,QAAQ,CAACK,IAAT,EAAV,CAAnB,CAFoB,CAIpB;;AACA,QAAI,CAACL,QAAQ,CAACM,EAAd,EAAkB;AACd;AACA,YAAMC,KAAK,GAAIH,IAAI,IAAIA,IAAI,CAACI,OAAd,IAA0BR,QAAQ,CAACS,MAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAED,SAAKK,QAAL,CAAc;AAAEC,MAAAA,MAAM,EAAET,IAAI,CAACU;AAAf,KAAd;AACH,GAbL,EAcKC,KAdL,CAcWR,KAAK,IAAI;AACZ,SAAKK,QAAL,CAAc;AAAEI,MAAAA,YAAY,EAAET,KAAK,CAACU,QAAN;AAAhB,KAAd;AACAC,IAAAA,OAAO,CAACX,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACH,GAjBL;AAmBM,sBACE;AAAW,IAAA,SAAS,EAAC,kBAArB;AAAwC,IAAA,KAAK,EAAC,IAA9C;AAAA,2BACA,QAAC,KAAD;AAAO,MAAA,OAAO,MAAd;AAAe,MAAA,QAAQ,MAAvB;AAAwB,MAAA,KAAK,MAA7B;AAA8B,MAAA,OAAO,EAAC,MAAtC;AAA6C,MAAA,UAAU,MAAvD;AAAA,8BACA;AAAA,+BACE;AAAA,kCACG;AAAI,YAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADH,eAEG;AAAI,YAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADA,eAOA;AAAA,kBACGM,MAAM,CAACM,GAAP,CAAWC,IAAI,iBACd;AAAA,iCACF;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA,oBADF,eAIE;AAAA;AAAA;AAAA;AAAA,oBAJF,eAKE;AAAA;AAAA;AAAA;AAAA,oBALF,eAME;AAAA;AAAA;AAAA;AAAA,oBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADE,yBADD;AADH;AAAA;AAAA;AAAA;AAAA,cAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADF;AAyBG;;KAlDA9B,U;AAsDP,SAAQA,UAAR","sourcesContent":["import {button, Breadcrumb, Card, Form, Container, Row, Col,Table} from \"react-bootstrap\"\r\nimport React, { useState,useEffect } from \"react\"\r\nimport Navbar1 from \"./components/Navbar1\"\r\n\r\nfunction Fetchmusic() {\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ title: 'React POST Request Example' })\r\n};\r\nfetch('http://localhost:8080/SolidCode-BackEnd/api/solidMusic/searchq=jason derulo', requestOptions)\r\n    .then(async response => {\r\n        const isJson = response.headers.get('content-type')?.includes('application/json');\r\n        const data = isJson && await response.json();\r\n\r\n        // check for error response\r\n        if (!response.ok) {\r\n            // get error message from body or default to response status\r\n            const error = (data && data.message) || response.status;\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        this.setState({ postId: data.id })\r\n    })\r\n    .catch(error => {\r\n        this.setState({ errorMessage: error.toString() });\r\n        console.error('There was an error!', error);\r\n    });\r\n\r\n      return (\r\n        <container className=\"themed-container\" fluid=\"md\">\r\n        <Table striped bordered hover variant=\"dark\" responsive>\r\n        <thead>\r\n          <tr>\r\n             <th scope=\"col\">Title name</th>\r\n             <th scope=\"col\">Artist</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {postId.map(item => (\r\n            <>\r\n          <tr >  \r\n            <td>\r\n            \r\n            </td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            </tr>\r\n           </>\r\n          ))}\r\n          </tbody>\r\n          </Table>\r\n          </container>\r\n      );}\r\n    \r\n  \r\n\r\n  export {Fetchmusic}"]},"metadata":{},"sourceType":"module"}