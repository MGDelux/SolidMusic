{"ast":null,"code":"function Fetchplaylist(message) {\n  const URL = \"http://localhost:8080/SolidCode-BackEnd\";\n  const options = makeOptions(\"POST\", true);\n  return fetch(URL + \"/api/playlist/get\", options);\n}\n\n_c = Fetchplaylist;\n\nconst getToken = () => {\n  return localStorage.getItem('jwtToken');\n};\n\nconst makeOptions = (method, addToken, body) => {\n  var opts = {\n    method: method,\n    headers: {\n      \"Content-type\": \"application/json\",\n      'Accept': 'application/json'\n    }\n  };\n\n  if (addToken) {\n    opts.headers[\"x-access-token\"] = getToken();\n  }\n\n  if (body) {\n    opts.body = JSON.stringify(body);\n  }\n\n  return opts;\n};\n\nexport default Fetchplaylist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Fetchplaylist\");","map":{"version":3,"sources":["C:/Users/melo-/Documents/NetBeansProjects/SolidMusic/FrontEnd/src/components/Showplaylist.js"],"names":["Fetchplaylist","message","URL","options","makeOptions","fetch","getToken","localStorage","getItem","method","addToken","body","opts","headers","JSON","stringify"],"mappings":"AAAA,SAASA,aAAT,CAAuBC,OAAvB,EAAgC;AAC5B,QAAMC,GAAG,GAAG,yCAAZ;AACA,QAAMC,OAAO,GAAGC,WAAW,CAAC,MAAD,EAAS,IAAT,CAA3B;AACA,SAAOC,KAAK,CAACH,GAAG,GAAC,mBAAL,EAAyBC,OAAzB,CAAZ;AACD;;KAJMH,a;;AAKP,MAAMM,QAAQ,GAAG,MAAM;AACrB,SAAOC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAP;AACD,CAFD;;AAKA,MAAMJ,WAAW,GAAE,CAACK,MAAD,EAAQC,QAAR,EAAiBC,IAAjB,KAAyB;AAC1C,MAAIC,IAAI,GAAG;AACTH,IAAAA,MAAM,EAAEA,MADC;AAETI,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,gBAAU;AAFH;AAFA,GAAX;;AAOA,MAAIH,QAAJ,EAAc;AACZE,IAAAA,IAAI,CAACC,OAAL,CAAa,gBAAb,IAAiCP,QAAQ,EAAzC;AACD;;AACD,MAAIK,IAAJ,EAAU;AACRC,IAAAA,IAAI,CAACD,IAAL,GAAYG,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAZ;AACD;;AACD,SAAOC,IAAP;AACD,CAfD;;AAkBA,eAAeZ,aAAf","sourcesContent":["function Fetchplaylist(message) {\r\n    const URL = \"http://localhost:8080/SolidCode-BackEnd\";\r\n    const options = makeOptions(\"POST\", true);\r\n    return fetch(URL+\"/api/playlist/get\",options) \r\n  }\r\n  const getToken = () => {\r\n    return localStorage.getItem('jwtToken')\r\n  }\r\n  \r\n  \r\n  const makeOptions= (method,addToken,body) =>{\r\n    var opts = {\r\n      method: method,\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        'Accept': 'application/json',\r\n      }\r\n    }\r\n    if (addToken) {\r\n      opts.headers[\"x-access-token\"] = getToken();\r\n    }\r\n    if (body) {\r\n      opts.body = JSON.stringify(body);\r\n    }\r\n    return opts;\r\n  }\r\n  \r\n  \r\n  export default Fetchplaylist;\r\n"]},"metadata":{},"sourceType":"module"}