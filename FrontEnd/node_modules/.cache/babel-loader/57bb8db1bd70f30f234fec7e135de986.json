{"ast":null,"code":"const URL = \"http://localhost:8080/SolidCode-BackEnd\";\n\nfunction handleHttpErrors(res) {\n  if (!res.ok) {\n    return Promise.reject({\n      status: res.status,\n      fullError: res.json()\n    });\n  }\n\n  return res.json();\n}\n\nconst setToken = token => {\n  localStorage.setItem('jwtToken', token);\n};\n\nconst getToken = () => {\n  return localStorage.getItem('jwtToken');\n};\n\nconst loggedIn = () => {\n  const loggedIn = getToken() != null;\n  return loggedIn;\n};\n\nconst logout = () => {\n  localStorage.removeItem(\"jwtToken\");\n};\n\nfunction apiFacade() {\n  /* Insert utility-methods from a latter step (d) here (REMEMBER to uncomment in the returned object when you do)*/\n  const login = (user, password) => {\n    console.log(\"LOGIN:\", user, password);\n    const options = makeOptions(\"POST\", true, {\n      username: user,\n      password: password\n    });\n    return fetch(URL + \"/api/login\", options).then(handleHttpErrors).then(res => {\n      setToken(res.token);\n    });\n  };\n\n  const fetchData = () => {\n    const options = makeOptions(\"GET\", true); //True add's the token\n\n    return fetch(URL + \"/api/info/user\", options).then(handleHttpErrors);\n  };\n\n  const makeOptions = (method, addToken, body) => {\n    var opts = {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json\",\n        'Accept': 'application/json'\n      }\n    };\n\n    if (addToken && loggedIn()) {\n      opts.headers[\"x-access-token\"] = getToken();\n    }\n\n    if (body) {\n      opts.body = JSON.stringify(body);\n    }\n\n    return opts;\n  };\n\n  return {\n    makeOptions,\n    setToken,\n    getToken,\n    loggedIn,\n    login,\n    logout,\n    fetchData\n  };\n}\n\nconst facade = apiFacade();\nexport { apiFacade, getToken };","map":{"version":3,"sources":["C:/Users/melo-/Documents/NetBeansProjects/SolidMusic/FrontEnd/src/apiFacade.js"],"names":["URL","handleHttpErrors","res","ok","Promise","reject","status","fullError","json","setToken","token","localStorage","setItem","getToken","getItem","loggedIn","logout","removeItem","apiFacade","login","user","password","console","log","options","makeOptions","username","fetch","then","fetchData","method","addToken","body","opts","headers","JSON","stringify","facade"],"mappings":"AAAA,MAAMA,GAAG,GAAG,yCAAZ;;AAEA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC9B,MAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACX,WAAOC,OAAO,CAACC,MAAR,CAAe;AAAEC,MAAAA,MAAM,EAAEJ,GAAG,CAACI,MAAd;AAAsBC,MAAAA,SAAS,EAAEL,GAAG,CAACM,IAAJ;AAAjC,KAAf,CAAP;AACD;;AACD,SAAON,GAAG,CAACM,IAAJ,EAAP;AACA;;AAED,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AACxBC,EAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACD,CAFH;;AAGA,MAAMG,QAAQ,GAAG,MAAM;AACrB,SAAOF,YAAY,CAACG,OAAb,CAAqB,UAArB,CAAP;AACD,CAFD;;AAGA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAMA,QAAQ,GAAGF,QAAQ,MAAM,IAA/B;AACA,SAAOE,QAAP;AACD,CAHD;;AAIA,MAAMC,MAAM,GAAG,MAAM;AACnBL,EAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACD,CAFD;;AAKA,SAASC,SAAT,GAAqB;AACpB;AAED,QAAMC,KAAK,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,IAAtB,EAA4BC,QAA5B;AACA,UAAMG,OAAO,GAAGC,WAAW,CAAC,MAAD,EAAS,IAAT,EAAc;AAACC,MAAAA,QAAQ,EAAEN,IAAX;AAAiBC,MAAAA,QAAQ,EAAEA;AAA3B,KAAd,CAA3B;AACA,WAAOM,KAAK,CAAC3B,GAAG,GAAG,YAAP,EAAqBwB,OAArB,CAAL,CACJI,IADI,CACC3B,gBADD,EAEJ2B,IAFI,CAEC1B,GAAG,IAAI;AAACO,MAAAA,QAAQ,CAACP,GAAG,CAACQ,KAAL,CAAR;AAAqB,KAF9B,CAAP;AAID,GAPH;;AAQA,QAAMmB,SAAS,GAAG,MAAM;AAAE,UAAML,OAAO,GAAGC,WAAW,CAAC,KAAD,EAAO,IAAP,CAA3B,CAAF,CAA2C;;AACnE,WAAOE,KAAK,CAAC3B,GAAG,GAAG,gBAAP,EAAyBwB,OAAzB,CAAL,CAAuCI,IAAvC,CAA4C3B,gBAA5C,CAAP;AAEC,GAHD;;AAIA,QAAMwB,WAAW,GAAE,CAACK,MAAD,EAAQC,QAAR,EAAiBC,IAAjB,KAAyB;AACzC,QAAIC,IAAI,GAAG;AACTH,MAAAA,MAAM,EAAEA,MADC;AAETI,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,kBAAU;AAFH;AAFA,KAAX;;AAOA,QAAIH,QAAQ,IAAIhB,QAAQ,EAAxB,EAA4B;AAC1BkB,MAAAA,IAAI,CAACC,OAAL,CAAa,gBAAb,IAAiCrB,QAAQ,EAAzC;AACD;;AACD,QAAImB,IAAJ,EAAU;AACRC,MAAAA,IAAI,CAACD,IAAL,GAAYG,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAZ;AACD;;AACD,WAAOC,IAAP;AACD,GAfF;;AAgBC,SAAO;AACHR,IAAAA,WADG;AAEHhB,IAAAA,QAFG;AAGHI,IAAAA,QAHG;AAIHE,IAAAA,QAJG;AAKHI,IAAAA,KALG;AAMHH,IAAAA,MANG;AAOHa,IAAAA;AAPG,GAAP;AAUA;;AACD,MAAMQ,MAAM,GAAGnB,SAAS,EAAxB;AACA,SAAQA,SAAR,EAAmBL,QAAnB","sourcesContent":["const URL = \"http://localhost:8080/SolidCode-BackEnd\";\r\n \r\nfunction handleHttpErrors(res) {\r\n if (!res.ok) {\r\n   return Promise.reject({ status: res.status, fullError: res.json() })\r\n }\r\n return res.json();\r\n}\r\n\r\nconst setToken = (token) => {\r\n    localStorage.setItem('jwtToken', token)\r\n  }\r\nconst getToken = () => {\r\n  return localStorage.getItem('jwtToken')\r\n}\r\nconst loggedIn = () => {\r\n  const loggedIn = getToken() != null;\r\n  return loggedIn;\r\n}\r\nconst logout = () => {\r\n  localStorage.removeItem(\"jwtToken\");\r\n}\r\n\r\n \r\nfunction apiFacade() {\r\n /* Insert utility-methods from a latter step (d) here (REMEMBER to uncomment in the returned object when you do)*/\r\n \r\nconst login = (user, password) => {\r\n    console.log(\"LOGIN:\", user, password)\r\n    const options = makeOptions(\"POST\", true,{username: user, password: password });\r\n    return fetch(URL + \"/api/login\", options)\r\n      .then(handleHttpErrors)\r\n      .then(res => {setToken(res.token) })\r\n\r\n  }\r\nconst fetchData = () => { const options = makeOptions(\"GET\",true); //True add's the token\r\nreturn fetch(URL + \"/api/info/user\", options).then(handleHttpErrors);\r\n\r\n}\r\nconst makeOptions= (method,addToken,body) =>{\r\n   var opts = {\r\n     method: method,\r\n     headers: {\r\n       \"Content-type\": \"application/json\",\r\n       'Accept': 'application/json',\r\n     }\r\n   }\r\n   if (addToken && loggedIn()) {\r\n     opts.headers[\"x-access-token\"] = getToken();\r\n   }\r\n   if (body) {\r\n     opts.body = JSON.stringify(body);\r\n   }\r\n   return opts;\r\n }\r\n return {\r\n     makeOptions,\r\n     setToken,\r\n     getToken,\r\n     loggedIn,\r\n     login,\r\n     logout,\r\n     fetchData\r\n }\r\n\r\n}\r\nconst facade = apiFacade();\r\nexport {apiFacade, getToken};\r\n"]},"metadata":{},"sourceType":"module"}