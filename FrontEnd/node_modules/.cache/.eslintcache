[{"C:\\Users\\mathi\\Documents\\NetBeansProjects\\SolidCode-StartCode-FrontEnd\\src\\index.js":"1","C:\\Users\\mathi\\Documents\\NetBeansProjects\\SolidCode-StartCode-FrontEnd\\src\\App.js":"2","C:\\Users\\mathi\\Documents\\NetBeansProjects\\SolidCode-StartCode-FrontEnd\\src\\reportWebVitals.js":"3","C:\\Users\\mathi\\Documents\\NetBeansProjects\\SolidCode-StartCode-FrontEnd\\src\\apiFacade.js":"4","C:\\Users\\mathi\\Documents\\NetBeansProjects\\SolidCode-StartCode-FrontEnd\\src\\test.js":"5","C:\\Users\\mathi\\Documents\\NetBeansProjects\\SolidCode-StartCode-FrontEnd\\src\\Route.js":"6"},{"size":517,"mtime":1619339471580,"results":"7","hashOfConfig":"8"},{"size":2902,"mtime":1619339471578,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1619339471581,"results":"10","hashOfConfig":"8"},{"size":1689,"mtime":1619339471579,"results":"11","hashOfConfig":"8"},{"size":8106,"mtime":1619339471582,"results":"12","hashOfConfig":"8"},{"size":4323,"mtime":1619339471578,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pnoe93",{"filePath":"16","messages":"17","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"C:\\Users\\mathi\\Documents\\NetBeansProjects\\SolidCode-StartCode-FrontEnd\\src\\index.js",[],"C:\\Users\\mathi\\Documents\\NetBeansProjects\\SolidCode-StartCode-FrontEnd\\src\\App.js",["29","30","31","32","33","34","35","36","37","38","39","40","41"],"import React, { useState,useEffect, Component } from \"react\"\r\nimport facade from \"./apiFacade\";\r\nimport test, {MyComponents,getNorris} from \"./test\";\r\nimport {button, Breadcrumb, Card, Form, Container, Row, Col,Table} from \"react-bootstrap\"\r\nimport \"./App.css\";\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport BasicExample from \"./Route\";\r\n\r\nfunction LogIn({ login }) {\r\n  const init = { username: \"\", password: \"\" };\r\n  const [loginCredentials, setLoginCredentials] = useState(init);\r\n \r\n  const performLogin = (evt) => {\r\n    console.log(\"log in\")\r\n    evt.preventDefault();\r\n    login(loginCredentials.username, loginCredentials.password);\r\n  }\r\n  const onChange = (evt) => {\r\n    setLoginCredentials({ ...loginCredentials,[evt.target.id]: evt.target.value })\r\n  }\r\n \r\n  return (\r\n  <Container container-md>\r\n    <div classname= \"w-responsive text-center mx-auto p-3 mt-2\">\r\n     <Card classname=\"mb-3\">\r\n       <Card.Img width=\"70%\" src=\"https://miro.medium.com/max/1000/1*TjDnfpnw4gI8sZ2fvaK9zg.jpeg\"/>\r\n       <Card.Body>\r\n      <form classname=\"login-form\" onChange={onChange}>\r\n        <Card.Title>\r\n                <h2>SolidCode startcode</h2>\r\n        </Card.Title>\r\n        <Card.Text>\r\n        log ind på siden med det givet passward, og du kan læse ReadMe fanen for mere info om frontenden.\r\n      </Card.Text>\r\n                <div className=\"form-group\">\r\n                \r\n                    <label>Username</label>\r\n                    <input id=\"username\" className=\"form-control\" placeholder=\"User Name\" />\r\n                \r\n\r\n                \r\n                    <label>Password</label>\r\n                    <input id=\"password\" type=\"password\" className=\"form-control\" placeholder=\"Password\" />\r\n                    \r\n                </div>\r\n                \r\n                <button onClick={performLogin} className=\"btn btn-primary btn-block\">Submit</button>\r\n      </form>\r\n      \r\n      </Card.Body>\r\n      </Card>\r\n      </div>\r\n    </Container>\r\n  )\r\n \r\n}\r\nfunction LoggedIn() {\r\n  const [dataFromServer, setDataFromServer] = useState(\"Loading...\")\r\n  useEffect(\r\n    () => {\r\n    facade.fetchData().then(data=> setDataFromServer(data.msg));\r\n  },\r\n   [])\r\n \r\n  return (\r\n    <>\r\n    \r\n    <div>\r\n      <h2>Data Received from server</h2>\r\n      <h3>{dataFromServer}</h3>\r\n    </div>\r\n    <BasicExample/>\r\n</>\r\n  )\r\n \r\n}\r\n\r\nfunction App() {\r\n  const [loggedIn, setLoggedIn] = useState(false)\r\n \r\n  const logout = () => { \r\n  facade.logout()\r\n  setLoggedIn(false)\r\n} \r\n  const login = (user, pass) => \r\n  {\r\n    facade.login(user,pass)\r\n    .then(res =>setLoggedIn(true));\r\n   } \r\n \r\n  return (\r\n    <div>\r\n      {!loggedIn ? (<LogIn login={login} />) :\r\n        (<div>\r\n          <LoggedIn />\r\n          <button onClick={logout}>Logout</button>\r\n        </div>)}\r\n    </div>\r\n  )\r\n \r\n \r\n}\r\nexport default App;\r\n \r\n","C:\\Users\\mathi\\Documents\\NetBeansProjects\\SolidCode-StartCode-FrontEnd\\src\\reportWebVitals.js",[],"C:\\Users\\mathi\\Documents\\NetBeansProjects\\SolidCode-StartCode-FrontEnd\\src\\apiFacade.js",[],"C:\\Users\\mathi\\Documents\\NetBeansProjects\\SolidCode-StartCode-FrontEnd\\src\\test.js",["42","43","44","45","46","47","48"],"import React, { useState,useEffect } from \"react\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport {button, Breadcrumb, Card, Form, Container, Row, Col,Table} from \"react-bootstrap\"\r\n  \r\n  function MyComponent() {\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [items, setItems] = useState([]);\r\n \r\n    useEffect(() => {\r\n      fetch(\"http://localhost:8080/SolidCode-BackEnd/api/dummyAPI/all\")\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            setIsLoaded(true);\r\n            setItems(result);\r\n            console.log(result);\r\n          },\r\n          (error) => {\r\n            setIsLoaded(true);\r\n            setError(error);\r\n          }\r\n        )\r\n    }, [])\r\n  \r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        <container className=\"themed-container\" fluid=\"md\">\r\n        <Table striped bordered hover variant=\"dark\" responsive>\r\n        <thead>\r\n          <tr>\r\n          <th scope=\"col\">#ID</th>\r\n             <th scope=\"col\">Name</th>\r\n             <th scope=\"col\">Day</th>\r\n             <th scope=\"col\">Time</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {items.map(item => (\r\n            <>\r\n          <tr >  \r\n            <td key={item.id}>\r\n            {item.id}\r\n            </td>\r\n            <td>{item.name}</td>\r\n            <td>{item.date.date.year}/{item.date.date.month}/{item.date.date.day}  </td>\r\n            <td>{item.date.time.hour}:{item.date.time.minute}:{item.date.time.second}</td>\r\n            </tr>\r\n           </>\r\n          ))}\r\n          </tbody>\r\n          </Table>\r\n          </container>\r\n      );\r\n    }\r\n  }\r\n  \r\n\r\n  function GetNorris() {\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [items, setItems] = useState([]);\r\n \r\n    useEffect(() => {\r\n      fetch(\"http://localhost:8080/SolidCode-BackEnd/api/dummyAPI/5endPoints\")\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            setIsLoaded(true);\r\n            setItems(result);\r\n            console.log(result);\r\n          },\r\n          (error) => {\r\n            setIsLoaded(true);\r\n            setError(error);\r\n          }\r\n        )\r\n    }, [])\r\n  \r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        \r\n        <Table striped bordered hover variant=\"dark\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">#ID</th>\r\n            <th scope=\"col\">Punline</th>\r\n            <th scope=\"col\">URL</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {items.map(item => (\r\n            <>\r\n          <tr>  \r\n            <td key={item.chuck_Joke.id}>{item.chuck_Joke.id}</td>\r\n            <td>{item.chuck_Joke.value}</td>\r\n            <td>{item.chuck_Joke.url}</td>\r\n          </tr>\r\n           </>\r\n          ))}\r\n          </tbody>\r\n          </Table>\r\n      );\r\n    }\r\n  }\r\n  \r\n  \r\n  function Getrandom() {\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [items, setItems] = useState([]);\r\n \r\n    useEffect(() => {\r\n      fetch(\"http://localhost:8080/SolidCode-BackEnd/api/dummyAPI/5endPoints\")\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            setIsLoaded(true);\r\n            setItems(result);\r\n            console.log(result);\r\n          },\r\n          (error) => {\r\n            setIsLoaded(true);\r\n            setError(error);\r\n          }\r\n        )\r\n    }, [])\r\n  \r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        \r\n        <Table striped bordered hover variant=\"dark\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">#ID</th>\r\n            <th scope=\"col\">joke</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {items.map(item => (\r\n            <>\r\n          <tr>  \r\n            <td key={item.random_Joke.id}>{item.random_Joke.id}</td>\r\n            <td>{item.random_Joke.joke}</td>\r\n          </tr>\r\n           </>\r\n          ))}\r\n          </tbody>\r\n          </Table>\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  function Starwars() {\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [items, setItems] = useState([]);\r\n \r\n    useEffect(() => {\r\n      fetch(\"http://localhost:8080/SolidCode-BackEnd/api/dummyAPI/5endPoints\")\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            setIsLoaded(true);\r\n            setItems(result);\r\n            console.log(result);\r\n          },\r\n          (error) => {\r\n            setIsLoaded(true);\r\n            setError(error);\r\n          }\r\n        )\r\n    }, [])\r\n  \r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        \r\n        <Table striped bordered hover variant=\"dark\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Name</th>\r\n            <th scope=\"col\">Model</th>\r\n            <th scope=\"col\">Manufacturer</th>\r\n            <th scope=\"col\">Cost_in_credits</th>\r\n            <th scope=\"col\">Length</th>\r\n            <th scope=\"col\">Crew</th>\r\n            <th scope=\"col\">Hyperdrive_rating</th>\r\n            <th scope=\"col\">Pilots</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {items.map(item => (\r\n            <>\r\n          <tr>  \r\n            <td key={item.starWarsShip_INFO.name}>{item.starWarsShip_INFO.name  }</td>\r\n            <td key={item.starWarsShip_INFO.model}>{item.starWarsShip_INFO.joke}</td>\r\n            <td key={item.starWarsShip_INFO.manufacturer}>{item.starWarsShip_INFO.manufacturer}</td>\r\n            <td key={item.starWarsShip_INFO.cost_in_credits}>{item.starWarsShip_INFO.cost_in_credits}</td>\r\n            <td key={item.starWarsShip_INFO.length}>{item.starWarsShip_INFO.length}</td>\r\n            <td key={item.starWarsShip_INFO.crew}>{item.starWarsShip_INFO.crew}</td>\r\n            <td key={item.starWarsShip_INFO.hyperdrive_rating}>{item.starWarsShip_INFO.hyperdrive_rating}</td>\r\n            <td key={item.starWarsShip_INFO.pilots}>{item.starWarsShip_INFO.pilots}</td>\r\n          </tr>\r\n           </>\r\n          ))}\r\n          </tbody>\r\n          </Table>\r\n      );\r\n    }\r\n  }\r\n\r\n  function CatFact() {\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [items, setItems] = useState([]);\r\n \r\n    useEffect(() => {\r\n      fetch(\"http://localhost:8080/SolidCode-BackEnd/api/dummyAPI/5endPoints\")\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            setIsLoaded(true);\r\n            setItems(result);\r\n            console.log(result);\r\n          },\r\n          (error) => {\r\n            setIsLoaded(true);\r\n            setError(error);\r\n          }\r\n        )\r\n    }, [])\r\n  \r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        \r\n        <Table striped bordered hover variant=\"dark\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">#ID</th>\r\n            <th scope=\"col\">Info</th>\r\n            <th scope=\"col\">CreatedAt</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {items.map(item => (\r\n            <>\r\n          <tr>  \r\n            <td key={item.catFact._id}>{item.catFact.id}</td>\r\n            <td>{item.catFact.text}</td>\r\n            <td>{item.catFact.createdAt}</td>\r\n          </tr>\r\n           </>\r\n          ))}\r\n          </tbody>\r\n          </Table>\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  export {GetNorris};\r\n  export {MyComponent};\r\n  export {Getrandom};\r\n  export {Starwars};\r\n  export {CatFact};\r\n\r\n","C:\\Users\\mathi\\Documents\\NetBeansProjects\\SolidCode-StartCode-FrontEnd\\src\\Route.js",["49"],"import \"./style2.css\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    NavLink,\r\n    Link\r\n  } from \"react-router-dom\";\r\n  import {MyComponent,GetNorris, Getrandom, Starwars,CatFact}from \"./test.js\";\r\n\r\n  export default function BasicExample() {\r\n    return (\r\n        <>\r\n      <Router>\r\n        <div>\r\n          <ul className=\"header\">\r\n            <li>\r\n            <NavLink exact activeClassName=\"selected\" to=\"/\">Home</NavLink>\r\n            </li>\r\n            <li>\r\n            <NavLink exact activeClassName=\"selected\" to=\"/Endpoint1\">All</NavLink>\r\n            </li>\r\n            <li>\r\n            <NavLink exact activeClassName=\"selected\" to=\"/Endpoint2\">Chuck Norris</NavLink>\r\n            </li>\r\n            <li>\r\n            <NavLink exact activeClassName=\"selected\" to=\"/Endpoint3\">Random joke</NavLink>\r\n            </li>\r\n            <li>\r\n            <NavLink exact activeClassName=\"selected\" to=\"/Endpoint4\">Starwars ships</NavLink>\r\n            </li>\r\n            <li>\r\n            <NavLink exact activeClassName=\"selected\" to=\"/Endpoint5\">Cat Fact</NavLink>\r\n            </li>\r\n            <li>\r\n            <NavLink exact activeClassName=\"selected\" to=\"/ReadMe\">ReadMe</NavLink>\r\n            </li>\r\n          </ul>\r\n  \r\n          <hr />\r\n  \r\n          {/*\r\n            A <Switch> looks through all its children <Route>\r\n            elements and renders the first one whose path\r\n            matches the current URL. Use a <Switch> any time\r\n            you have multiple routes, but you want only one\r\n            of them to render at a time\r\n          */}\r\n          <div className=\"content\"></div>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/Endpoint1\">\r\n              <Endpoint1 />\r\n            </Route>\r\n            <Route path=\"/Endpoint2\">\r\n              <Endpoint2 />\r\n            </Route>\r\n            <Route path=\"/Endpoint3\">\r\n              <Endpoint3 />\r\n            </Route>\r\n            <Route path=\"/Endpoint4\">\r\n              <Endpoint4 />\r\n            </Route>\r\n            <Route path=\"/Endpoint5\">\r\n              <Endpoint5 />\r\n            </Route>\r\n            <Route path=\"/ReadMe\">\r\n              <ReadMe />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n      </>\r\n    );\r\n  }\r\n  \r\n  // You can think of these components as \"pages\"\r\n  // in your app.\r\n  \r\n  function Home() {\r\n    return (\r\n      <div>\r\n        <h2>Home</h2>\r\n        <p>We got 4 different endpoints wich can be selected in the different tabs in the navbar</p>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  function Endpoint1() {\r\n    return (\r\n      <div>\r\n        <h2>All persons</h2>\r\n        <MyComponent/>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  function Endpoint2() {\r\n    return (\r\n      <div>\r\n        <h2>Chuck Norris joke</h2>\r\n        <GetNorris/>\r\n      </div>\r\n    );\r\n    }\r\n  function Endpoint3() {\r\n      return (\r\n        <div>\r\n          <h2>Random joke</h2>\r\n          <Getrandom/>\r\n        </div>\r\n      );\r\n    }\r\n    function Endpoint4() {\r\n      return (\r\n        <div>\r\n          <h2>Starwars ships</h2>\r\n          <Starwars/>\r\n        </div>\r\n      );\r\n  }\r\n  function Endpoint5() {\r\n    return (\r\n      <div>\r\n        <h2>Cat fact</h2>\r\n        <CatFact/>\r\n      </div>\r\n    );\r\n  }\r\n    function ReadMe() {\r\n      return (\r\n        <div>\r\n          <h2>ReadMe</h2>\r\n          <p>Der er 5 kald til 5 forskellige API´er som vi har hentet dataen fra (Link kan se forneden) ellers er front-end´en meget basic <br></br>\r\n             alt du skal gør er at klikke på en af fanebladende og dataeb spyttes ud i en tabel.\r\n          </p>\r\n\r\n          <ul>\r\n            <li>\r\n              <p>Api til user i databasen</p>\r\n              <a href=\"http://localhost:8080/SolidCode-BackEnd/api/dummyAPI/all\">http://localhost:8080/SolidCode-BackEnd/api/dummyAPI/all</a>\r\n            </li>\r\n            <br></br>\r\n            <li>\r\n              <p>Dette er vores API som indeholder data fra 5 tilfældige API´er på nettet som er smidt sammen i et Array</p>\r\n              <a href=\"http://localhost:8080/SolidCode-BackEnd/api/dummyAPI/5endPoints\">http://localhost:8080/SolidCode-BackEnd/api/dummyAPI/5endPoints</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      );\r\n}",{"ruleId":"50","severity":1,"message":"51","line":1,"column":37,"nodeType":"52","messageId":"53","endLine":1,"endColumn":46},{"ruleId":"50","severity":1,"message":"54","line":3,"column":8,"nodeType":"52","messageId":"53","endLine":3,"endColumn":12},{"ruleId":"50","severity":1,"message":"55","line":3,"column":15,"nodeType":"52","messageId":"53","endLine":3,"endColumn":27},{"ruleId":"50","severity":1,"message":"56","line":3,"column":28,"nodeType":"52","messageId":"53","endLine":3,"endColumn":37},{"ruleId":"50","severity":1,"message":"57","line":4,"column":17,"nodeType":"52","messageId":"53","endLine":4,"endColumn":27},{"ruleId":"50","severity":1,"message":"58","line":4,"column":35,"nodeType":"52","messageId":"53","endLine":4,"endColumn":39},{"ruleId":"50","severity":1,"message":"59","line":4,"column":52,"nodeType":"52","messageId":"53","endLine":4,"endColumn":55},{"ruleId":"50","severity":1,"message":"60","line":4,"column":57,"nodeType":"52","messageId":"53","endLine":4,"endColumn":60},{"ruleId":"50","severity":1,"message":"61","line":4,"column":61,"nodeType":"52","messageId":"53","endLine":4,"endColumn":66},{"ruleId":"50","severity":1,"message":"62","line":8,"column":20,"nodeType":"52","messageId":"53","endLine":8,"endColumn":26},{"ruleId":"50","severity":1,"message":"63","line":9,"column":3,"nodeType":"52","messageId":"53","endLine":9,"endColumn":9},{"ruleId":"50","severity":1,"message":"64","line":10,"column":3,"nodeType":"52","messageId":"53","endLine":10,"endColumn":8},{"ruleId":"50","severity":1,"message":"65","line":11,"column":3,"nodeType":"52","messageId":"53","endLine":11,"endColumn":7},{"ruleId":"50","severity":1,"message":"66","line":3,"column":9,"nodeType":"52","messageId":"53","endLine":3,"endColumn":15},{"ruleId":"50","severity":1,"message":"57","line":3,"column":17,"nodeType":"52","messageId":"53","endLine":3,"endColumn":27},{"ruleId":"50","severity":1,"message":"67","line":3,"column":29,"nodeType":"52","messageId":"53","endLine":3,"endColumn":33},{"ruleId":"50","severity":1,"message":"58","line":3,"column":35,"nodeType":"52","messageId":"53","endLine":3,"endColumn":39},{"ruleId":"50","severity":1,"message":"68","line":3,"column":41,"nodeType":"52","messageId":"53","endLine":3,"endColumn":50},{"ruleId":"50","severity":1,"message":"59","line":3,"column":52,"nodeType":"52","messageId":"53","endLine":3,"endColumn":55},{"ruleId":"50","severity":1,"message":"60","line":3,"column":57,"nodeType":"52","messageId":"53","endLine":3,"endColumn":60},{"ruleId":"50","severity":1,"message":"65","line":7,"column":5,"nodeType":"52","messageId":"53","endLine":7,"endColumn":9},"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'test' is defined but never used.","'MyComponents' is defined but never used.","'getNorris' is defined but never used.","'Breadcrumb' is defined but never used.","'Form' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Table' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'button' is defined but never used.","'Card' is defined but never used.","'Container' is defined but never used."]